# -*- coding: utf-8 -*-
"""OnlineReviewClassificationUsingML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oBd5Z-kkyau_Z-fsChmUcuwUSbH7mI0C
"""

# Zachary Patrone
# Online Review Classification
# 11/16/2021
# Trains several machine learning models to perform the task of classifying online reviews to determine if they are relevant to a safety hazard.
#   Uses sklearn, nltk, and json


import joblib, json, nltk, math, requests, sklearn.neighbors, sklearn.metrics, sklearn.model_selection, sklearn.tree, sklearn.neural_network, textblob, time, warnings
nltk.download("popular")

# Load data from json
print()
print("Loading data...")
start_load_data_time = time.time()

response = requests.get("https://dgoldberg.sdsu.edu/515/appliance_reviews.json")

if response:

    data = json.loads(response.text)
    
    end_load_data_time = time.time()
    print("Completed in", (end_load_data_time - start_load_data_time), "seconds.")  
    print()


    # Getting unique words from json using textblob
    print("Identifying unique words...")
    unique = []

    start_unique_time = time.time()

    for line in data:
        review = line["Review"]
        blob = textblob.TextBlob(review)

        for word in blob.words:
            word = word.lower()
            if word not in unique:
                unique.append(word)

    end_unique_time = time.time()
    print("Completed in", (end_unique_time - start_unique_time), "seconds.")
    print()
    

    # Calculate relevance scores
    print("Generating relevance scores...")
    start_relevance_time = time.time()

    relevant = []

    # Loop through all the unique words to determine which ones are relevant to a safety hazard
    for word in unique:

        A = 0   # review contains word and refers to hazard 
        B = 0   # review contains word and does not refer to hazard 
        C = 0   # review does not contain word and refers to hazard 
        D = 0   # review does not contain word and does not refer to hazard 

        for line in data:
            review = line['Review']
            hazard = line["Safety hazard"]

            if word in review:
                if hazard == 1:
                    A += 1
                else:
                    B += 1
            else:
                if hazard == 1:
                    C += 1
                else:
                    D += 1

        try:
            # Formula to determine if a word is relevant or not
            score = (math.sqrt(A + B + C + D) * ((A * D) - (C * B))) / (math.sqrt((A + B) * (C + D)))
        except:
            score = 0

        if score > 4000:
            relevant.append(word)
    
    end_relevance_time = time.time()
    print("Completed in", (end_relevance_time - start_relevance_time), "seconds.")
    print()


    # Create 2D list for machine learning models
    print("Formatting 2D list...")
    start_list_time = time.time()

    x = []
    y = []

    for line in data:
        review = line['Review']
        hazard = line["Safety hazard"]

        rev_blob = textblob.TextBlob(review)
        rev_words = rev_blob.words

        inner_list = []
        for rel_word in relevant:
            if rel_word in rev_words:
                inner_list.append(1)
            else:
                inner_list.append(0)

        x.append(inner_list)
        y.append(hazard)
    
    end_list_time = time.time()
    print("Completed in", (end_list_time - start_list_time), "seconds.")
    print()
    

    # Train Data
    warnings.filterwarnings("ignore")

    print("Training machine learning models...")
    start_ml_time = time.time()

    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size = 0.2)


    # Build Decision Tree Model
    dt_clf = sklearn.tree.DecisionTreeClassifier()
    dt_clf = dt_clf.fit(x_train, y_train)

    dt_predictions = dt_clf.predict(x_test)
    dt_accuracy = sklearn.metrics.accuracy_score(y_test, dt_predictions)

    # Build K Nearest Neighbor Model
    knn_clf = sklearn.neighbors.KNeighborsClassifier(5)
    knn_clf = knn_clf.fit(x_train, y_train)
    knn_predictions = knn_clf.predict(x_test)
    knn_accuracy = sklearn.metrics.accuracy_score(y_test, knn_predictions)

    # Build Neural Network Model
    nn_clf = sklearn.neural_network.MLPClassifier()
    nn_clf = nn_clf.fit(x_train, y_train)
    nn_predictions = knn_clf.predict(x_test)
    nn_accuracy = sklearn.metrics.accuracy_score(y_test, nn_predictions)
    
    end_ml_time = time.time()
    print("Completed in", (end_ml_time - start_ml_time), "seconds.")
    print()

    print("Decision Tree Accuracy:", dt_accuracy)
    print("k-nearest neighbor accuracy:", knn_accuracy)
    print("Neural Network accuracy:", nn_accuracy)

    # Find best score
    best = max(dt_accuracy, knn_accuracy, nn_accuracy)

    if best == dt_accuracy:
        joblib.dump(dt_clf, "model.joblib")
        print("Decision Tree model performed best; saved to model.joblib.")

    elif best == knn_accuracy:
        joblib.dump(knn_clf, "model.joblib")
        print("K-Nearest Neighbors model performed best; saved to model.joblib.")

    elif best == nn_accuracy:
        joblib.dump(nn_clf, "model.joblib")
        print("Neural Networks model performed best; saved to model.joblib.")
    

else:
    print("Sorry, connection error.")